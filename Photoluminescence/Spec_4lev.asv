function I = Spec_4lev(I0, TransAmpR, Linewidth, Delta, E1, T, Energy, varargin)
    % <Description>
    % Calculates normalized photoluminescence intensity at energies specified by 'Energy', 
    % according to the 4-level effective model
    %
    % <Input>
    % I0 : [numeric] The overall factor in the photoluminescence amplitude
    %
    % TransAmpR : [numeric] The ratio d_{20}/d_{10}, 
    %                       where d_{i0} are amplitudes in the dipole operator 
    %                       D = d_{10} |E1><G| + d_{20} |E2><G| + h.c.
    %                           (E1 < E2)
    %
    % Linewidth : [numeric vector] 2-component vector containing linewidth of
    %                           the two excited states that give 
    %
    % Delta : [numeric] The energy splitting between |E1> and |E2> in meV
    %                   (i.e. Delta = E2 - E1)
    % 
    % E1 : [numeric] The energy difference between the ground state and the
    %               first excited state |E1> in meV
    %
    % T : [numeric] Temperature in Kelvins
    %
    % Energy : [numeric vector] The single-photon energies at which the
    %                           photoluminescence spectrum will be calculated
    %
    % <Option>
    %
    % 'Broaden', ... : [char] 'Lor' or 'Gauss'. 
    %                       If 'Lor', Lorentzian function is used as the broadening function 
    %                       If 'Gauss', Gaussian function is used as the broadening function 
    %                           (Default: 'Lor')
    %
    % <Output>
    % I : [numeric] Photoluminescence spectrum at energies specified by 'Energy'

    %% Parse input

    if ~isnumeric(I0) || ~isscalar(I0)
        error('ERR: ''I0'' must be a nonegative scalar');
    elseif I0 < 0
        error('ERR: ''I0'' must be nonnegative');
    end

    if ~isnumeric(TransAmpR) || ~isscalar(TransAmpR)
        error('ERR: ''TransAmpR'' must be a scalar value');
    end

    if ~isnumeric(Linewidth)
        error('ERR: ''Linewidth'' must be a 2-component vector');
    end

    if ~isnumeric(Delta) || ~isscalar(Delta)
        error('ERR: ''Delta'' must be a nonnegative scalar');
    elseif Delta < 0
        error('ERR: ''Delta'' must be nonnegative');
    end

    if ~isnumeric(E1) || ~isscalar(E1)
        error('ERR: ''E1'' must be a nonegative scalar');
    elseif E1 < 0
        error('ERR: ''E1'' must be nonnegative');
    end

    if ~isnumeric(T) || ~isscalar(T)
        error('ERR: ''T'' must be a positive scalar');
    elseif T < 0
        error('ERR: ''T'' must be nonnegative');
    end

    if ~isnumeric(Energy)
        error('ERR: ''Energy'' must be a vector containing positive numbers');
    end

    %% Parse options

    Broaden = 'Lor';

    while ~isempty(varargin)
        switch varargin{1}
            case 'Broaden'
                if ~isemeber(varargin{2}, {'Lor', 'Gauss'})
                    error('ERR: ''Broaden'' option must be either ''Lor'' or ''Gauss''');
                elseif isequal(varargin{2}, 'Lor')
                    Broaden = 'Lor';
                    var
                else
                end

            otherwise 
                if ischar(varargin{1})
                    error(['ERR: Unknown input ''',varargin{1},'''']);
                else
                    error('ERR: Unknown input');
                end
        end % switch-case
    end % while

    %% Compute photoluminescence spectrum

    % physical constants
    el = 1.602 * 1e-19;     % elementary charge
    kb = 1.38 * 1e-23;      % Boltzmann constant
    h = 6.626 * 1e-34;      % Planck constant
    e_kb = 1e-3 * el / kb;

    % dipole operator elements
    d1 = 1;
    d2 = TransAmpR;

    % energy levels
    E1 = E1;
    E2 = E1 + Delta;

    % energy level widths
    g1 = Linewidth(1);
    g2 = Linewidth(2);

    % Intensity
    I = zeros(numel(Energy), 1);

    for it = 1:numel(Energy)
        I(it) = I0 * ( d1^2 * Lorenztian((Energy(it)-E1), g1) + d2^2 * exp(-e_kb*Delta/T) * Lorenztian((Energy(it)-E2), g2) );
    end

    %% Define Lorentzain function
    function Lor = Lorenztian(X, Gamma)
        Lor = Gamma / (X^2 + (Gamma/2)^2) / 2;
    end
    

    function G = Gauss(X, sigma)
        G = exp(-X^2 / 2 / sigma^2) / sqrt(2*pi*sigma^2);
    end
end